""" Problem 12 - Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?"""

from math import sqrt,floor

# Solution
# We are only going to check up to square root of a number for factors.
# All we have to do is just double the answer to get the correct number
# of factors

def countDivisors(number):
    upper_bound = floor(sqrt(number))
    
    factor_counter = 0
    for n in range(1, upper_bound + 1):
        if not number % n:
            factor_counter += 1

    return 2 * factor_counter


# Now we just while loop it
end_flag = False
number = 1
counter = 1
while not end_flag:
    n_divisors = countDivisors(number)
    if n_divisors > 500:
        print(f'The first triangular number to have more than 500 divisors is {number}')
        end_flag = True
    counter += 1
    number += counter


